# byproducts.jl

"""
    StartWorkers(nwrkrs::Int)

Start workers if needed.
"""
function StartWorkers(nwrkrs::Int)
   set_workers = nwrkrs
   nworkers() < set_workers ? addprocs(set_workers) : nothing
   nworkers()
end

"""
    TaskDriver(indx,fn)

Broacast / distribute task (fn; e.g. loop_task1) over indices (indx; e.g. file indices)

Examples:

```
using CbiomesProcessing, Distributed, SparseArrays
TaskDriver(1,CbiomesProcessing.loop_task1)

StartWorkers(4)
@everywhere using CbiomesProcessing, SparseArrays
TaskDriver(1:4,CbiomesProcessing.loop_task1)
```

Visualize results:

```
using FortranFiles, Plots
k=1
recl=720*360*4
fil="diags_interp/ETAN/ETAN.0000000732.data"
f =  FortranFile(fil,"r",access="direct",recl=recl,convert="big-endian")
tmp=read(f,rec=k,(Float32,(720,360))); close(f)
heatmap(tmp)
```
"""
function TaskDriver(indx::Union{UnitRange{Int},Array{Int,1},Int},fn::Function)
    i=collect(indx)
    length(i)>1 ? i=distribute(i) : nothing
    isa(i,DArray) ? println(i.indices) : nothing
    fn.(i)
end

"""
    MetaFileRead(filIn::String)

Reads a meta file generated by MITgcm
"""
function MetaFileRead(FileName::String)

    MetaFile=FileName[1:end-5]*".meta"
    f = open(MetaFile)
    lines = readlines(f)
    close(f)

    MetaFile=Dict("MetaFile" => MetaFile)
    while !isempty(lines)
        line=popfirst!(lines)
        i0=findfirst(isequal('='), line)
        i1=findfirst(isequal(';'), line)
        !isnothing(i0) ? nam=strip(line[1:i0-1]) : nam=""
        val=nothing
        #show(line)
        if nam=="dimList"
            #special case: dimList
            val=fill(0.,(MetaFile["nDims"],3))
            for ii=1:MetaFile["nDims"]
                line=popfirst!(lines)
                tmp1=split(line,",")
                #tmp1=map(x->(v = tryparse(Int,x); ismissing(v) ? 0.0 : v),tmp1)
                val[ii,:]=parse.(Int,tmp1[1:3])
            end
            line=popfirst!(lines)
        elseif nam=="fldList"
            #special case: fldList
            line=popfirst!(lines)
            tmp1=split(line,"'")
            val=String.(tmp1[2:2:end])
            line=popfirst!(lines)
        elseif nam=="dataprec"
            #sepcial case: dataprec
            tmp1=split(line)
            tmp1[4]=="'float32'" ? val=Float32 : val=Float64
        elseif nam=="nDims"
            #sepcial case: nDims
            tmp1=split(line[i0+1:i1-1])
            val=parse(Int64,tmp1[2])
        end
        #
        if ~isnothing(val)
            tmp2=Dict(nam => val)
            MetaFile=merge(MetaFile,tmp2)
        end
    end

    return MetaFile
end

"""
    MatrixInterp(in::Array{T,N},SPM,siz) where {T,N}

Interpolate `in` using `SPM` to grid of size `siz`.
"""
function MatrixInterp(in::Array{T,N},SPM::SparseMatrixCSC,siz) where {T,N}
    #input
    l=size(in,1)*size(in,2);
    m=size(in,3);
    tmp1=reshape(in,l,m)
    tmp0=Float64.(.!(isnan.(tmp1)))
    tmp1[isnan.(tmp1)].=0.
    siz=siz[1],siz[2],m
    #matrix product
    tmp0=SPM*tmp0
    tmp1=SPM*tmp1
    tmp1=tmp1./tmp0
    #this may be redundant:
    tmp1[tmp0 .== 0.] .= NaN
    #output
    out=reshape(tmp1,siz)
    m==1 ? out=dropdims(out,dims=3) : nothing
    return out
end
